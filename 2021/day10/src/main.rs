fn main() {
    println!("++++++++++++");
    println!("PART#1");
    println!("++++++++++++");

    part1(TEST_INPUT);

    println!("-----");

    part1(INPUT);

    println!("++++++++++++");
    println!("PART#2");
    println!("++++++++++++");

    part2(TEST_INPUT);

    println!("-----");

    part2(INPUT);
}

fn part1(input: &str) {
    let mut total_illegal_syntax_score: usize = 0;
    for line in input.split("\n") {
        let it = line.as_bytes().iter().map(|b| CharacterKind::from(b));
        let mut stack = Vec::new();
        for c in it {
            if c.is_open() {
                stack.push(c);
            } else {
                match stack.pop() {
                    // ignore incomplete line
                    None => break,
                    Some(o) => {
                        if !o.is_match(&c) {
                            total_illegal_syntax_score += c.illegal_char_score();
                            break;
                        }
                    }
                }
            }
        }
    }
    println!("{}", total_illegal_syntax_score);
}

fn part2(input: &str) {
    let mut all_scores = Vec::new();
    'outer: for line in input.split("\n") {
        let it = line.as_bytes().iter().map(|b| CharacterKind::from(b));
        let mut stack = Vec::new();
        for c in it {
            if c.is_open() {
                stack.push(c);
            } else {
                match stack.pop() {
                    // ignore incomplete lines that cannot be completed
                    None => continue 'outer,
                    Some(o) => {
                        if !o.is_match(&c) {
                            // ignore corrupt lines
                            continue 'outer;
                        }
                    }
                }
            }
        }
        if stack.is_empty() {
            // ignore complete lines
            continue;
        }
        all_scores.push(stack.iter().rev().fold(0, |score, c| {
            score * 5 + c.completion_score()
        }));
    }
    all_scores.sort();
    let middle_score = all_scores[all_scores.len()/2];
    println!("{}", middle_score);
}

mod character_flags {
    pub const DIRECTION: u8 = 0b1111_0000;
    pub const OPEN: u8 = 0b0001_0000;
    pub const CLOSE: u8 = 0b0010_0000;

    pub const TYPE: u8 = 0b0000_1111;
    pub const ROUND: u8 = 0b0000_00001;
    pub const RECT: u8 = 0b0000_0010;
    pub const CURLY: u8 = 0b0000_0100;
    pub const SHARP: u8 = 0b0000_1000;
}

#[derive(Debug, Clone, Copy, PartialEq)]
struct CharacterKind {
    flags: u8,
}

impl From<&u8> for CharacterKind {
    fn from(b: &u8) -> CharacterKind {
        CharacterKind {
            flags: match b {
                b'(' => character_flags::ROUND | character_flags::OPEN,
                b')' => character_flags::ROUND | character_flags::CLOSE,
                b'[' => character_flags::RECT | character_flags::OPEN,
                b']' => character_flags::RECT | character_flags::CLOSE,
                b'{' => character_flags::CURLY | character_flags::OPEN,
                b'}' => character_flags::CURLY | character_flags::CLOSE,
                b'<' => character_flags::SHARP | character_flags::OPEN,
                b'>' => character_flags::SHARP | character_flags::CLOSE,
                _ => panic!("unexpected character {} not recognized", b),
            },
        }
    }
}

impl CharacterKind {
    pub fn illegal_char_score(&self) -> usize {
        if self.flags & character_flags::DIRECTION != character_flags::CLOSE {
            panic!(
                "expected a close character, character '{:?}' is invalid",
                self
            );
        }
        match self.flags & character_flags::TYPE {
            character_flags::ROUND => 3,
            character_flags::RECT => 57,
            character_flags::CURLY => 1197,
            character_flags::SHARP => 25137,
            _ => panic!("character '{:?}' not supported as illegal character", self),
        }
    }

    pub fn completion_score(&self) -> usize {
        if self.flags & character_flags::DIRECTION != character_flags::OPEN {
            panic!(
                "expected an open character, character '{:?}' is invalid",
                self
            );
        }
        match self.flags & character_flags::TYPE {
            character_flags::ROUND => 1,
            character_flags::RECT => 2,
            character_flags::CURLY => 3,
            character_flags::SHARP => 4,
            _ => panic!("character '{:?}' not supported as illegal character", self),
        }
    }

    pub fn is_match(&self, other: &CharacterKind) -> bool {
        (self.flags & character_flags::DIRECTION == character_flags::OPEN)
            && (other.flags & character_flags::DIRECTION == character_flags::CLOSE)
            && (self.flags & character_flags::TYPE == other.flags & character_flags::TYPE)
    }

    pub fn is_open(&self) -> bool {
        self.flags & character_flags::DIRECTION == character_flags::OPEN
    }
}

const TEST_INPUT: &'static str = "[({(<(())[]>[[{[]{<()<>>
[(()[<>])]({[<{<<[]>>(
{([(<{}[<>[]}>{[]{[(<()>
(((({<>}<{<{<>}{[]{[]{}
[[<[([]))<([[{}[[()]]]
[{[{({}]{}}([{[{{{}}([]
{<[[]]>}<{[{[{[]{()[[[]
[<(<(<(<{}))><([]([]()
<{([([[(<>()){}]>(<<{{
<{([{{}}[<[[[<>{}]]]>[]]";

const INPUT: &'static str = "{<<{({[(<<((({<>{}}(<>[]))<{<>{}}<[][]>>)([[[][]]][{{}<>}]))>{(([<{}>{{}<>]][[<>()](<><>)]))<<<[[][]][[]
{[([{[[[{({<<[<>[]]<()[]>>(<[]<>>({}))><{[{}()]{<>{}}}<<{}{}>{{}[]}>>}<<{{<>()}<()()>}<[(){}]<[]{
<(((<([(<(<<[<[][]><{}{}>]>>)><(({[({}[])<[]()>][<[]()><{}{}>]}({[{}<>][{}()]}{({}[])}))(<[{{}[]
{{<[[([{({(<[{()()}{{}<>}]({()()})>){<({[]<>}({}())){(()<>)<[]<>>}><({()[]}{[]}){{{}{}}}>}})}<[[((([<>()
[[({<<([[(({([()[]]{()<>})<{<>[]}[{}()]>}({{[]()}{[][]}}<<<>{}>{()[]}>))[(([(){}])<<(){}>{<>
({{{{[{[{[{<(({}<>)([][])){[{}{}]([]())}>}{{[[{}]{[]()}]}<([<><>][<>[]])>}]}]}<(<<{(<{[]()}{<><>}>(
{({[((({(<[[({[]()}<[]<>>)<{{}()}{<>{}}>]][{([<>()]<<>()>)[{<>{}}[[]()]]}{([{}()]<<>[]>){(()<>){[]}}}]>)(({<<
{<<[<{{([<<{(((){})([][]))}(((()[])<()()>)<<<>{}><(){}>>)>>[({<<<>()>{()<>}><<[]()><<>{}>>})[({{
(<<[(<{{<[[((<{}()>{[][]})<{{}()}(()<>)>)][[{(<><>}<<>()>}[{{}{}}({}())]]]]>([{<<[{}<>]{{}}>{
<{<(<({{([<[[[[]{}]<<>()>]][<<<><>>({}{})>]>[[{[[][]][()()]}<[()()]<<>{}>>](([{}()]])]]<<[{<<><>>{{}
{([[{([[{[([[{[]<>}{{}[]}](([]{})[[]<>])])]{[({([]())[{}<>]}[<{}><<><>>]){{[{}{}]{<><>}}({<>})}]
<<(([{{[<<<{({()()}{<>()}){<()()><<>()>}}<<([]<>)[<><>]><((){})[<>()}>>>{<(([]<>){{}<>})>{<[[][]][{}[]]
{{<(([[({{(<({<>()}<<>[]>)(({}[])(<>))>{([<>()][[]()])<[<>[]]{{}{}}>})<(([<>[]][<>{}]){{()<>}(<>())})
({<{<({[{{[<<{{}{}}(<>[])><<[]{}>>>]{{[[()[]][{}()]]{<<>{}>([]<>)}}{[{<>{}}(<>())]}}}}{((((<{}{}>{[
{<[{[<[<{(([{{[]{}}<[]()>}[[<><>][<>{}]]]{[((){}){{}[]}]{(()()){[]{}}}}))(<({{{}()}{{}<>}}{{<
<[<{([{{([({{[[]{}]([]<>)}(<<>[]>[<>[]])}<(<{}{}>(()[]))<{(){}}(<>())}>)]((<<[()[]]([][])>>[<([][]){()
{([{<{{(<{<<({(){}}[<>[]]]<<[][]>({}{})>>><[{{[]()}<()<>>}[<[]<>><<><>>]]<[<()>{()<>}]>>}<({([{}[]][<
{<{[({<(<({[<(<>[])>{({}[])([]{})}][[[<>{}]](<[]()>((){}))]>{[(({}<>)[{}[]])([{}]{[]()})]})>
[{[({[(<((<(({[]{}}<()()>)({{}}<(){}>))>([{{{}[]}(<>())}(<{}{}>{<>[]})][{<{}[]>{{}[]}}([<><>][{}{}])]))[{(([
(({((([(<({{[<<>[]><[][]>]((())(<>{}))}})<{(<<[]{}>[<>{}]><[()()]{<>()}>)[<[<>][()<>]>[[()()]{(){
([([[({({{<<({[][]}(<>{}))<{[]{}}{(){}}>>{({<>()}[[]()])}>([{<()[]>[<>[]]}]({<(){}}(<><>)}[<{}[]>{<>{}}])
({([{[<[({<<[({}{}){[]()}>[[<>{}]<()()>]>>[<{[<>()][{}()]}<[()<>]{()<>}>>]}<<{(<<>{}>)}{[[<>()]
[{(({({[{[<{<[<><>]>{{{}<>}[()<>]}}>]{{<[(<>)[()()]]<<<><>>({}<>)>><[(()[])[(){}]][<[]{}>]>}{{<({}{
{([<[(((([({([<>{}]<[]()>)[[(){}]]}((<[]>(<>())){([])(()())}))]){<(<(<(){}](<><>))<(()[]){<>[]}>>)[(({[]{
{{(<[([[[{{{(<[]{}>(()()))[{[][]}[{}()]]}<(<()<>>(<><>))>}<<<<[]{}>{[][]}><[<><>]{[]()}>><<[()<>){<>{}}>[<()(
<{{(<<[{[<<<{({}[])(<><>)}{[()]{{}<>}}>[{<<>{}>{[][]}}<[<>]({}()))]><({({}[])((){})}([{}{}][{}<>]))[
[<{<<[({({<(<<{}>([]<>)>[{[]()}[[]{}]]){[(<>[])({}[])][{()<>}[{}{}>]}><<([<>{}]<()[]>)<{()
({(<<<<{{{[<<[<>]((){})>[<[]<>>((){})]>([<[]()><<>[]>}[<<><>>((){})])][({{{}[]}((){})})[({()<>}{<>})[{()[]}
<{{{(<<<((<([{[]{}}{{}}])[[(()<>)(<>{})]]>)<<[[<[]{}><[]{}>](<()()>{<>[]})][(([]<>)<{}[]>)(<{}()><<
[<{(<[{<(<<((((){}][<>[]]){[[]()]<{}{}>})<[[()()]{{}()}]<[[]{}]{<>{}}>>>>[<(({{}<>}{{}[]}){(()(
[<({<[[({[<<{(()())[[]]}((()())<<>[]>)>([[<><>][{}()]]<<(){}>{<>}>>><{{<[][]>}[{{}[]}{<>[]}]}>
{{[<<({[((<<[(<>{}]<()<>>]><[({}<>){[]{}}][{{}{}}((){})]>>{{[[<>[]]]<{[][]}>}}))]}){([([{[{<
(<[[<[<{<<<[({{}[]}{<>[]})][<<{}{}>{<><>}>[{{}{}}<()<>>]]>>><{([[(<>())][(()<>)(()[])]])}>}>{{{<[((
([{[({[{<{[({{<>()}}<[[]{}]{<>{}}>)][{{[[][]]<<>{}>}((<><>)<()<>>)}]}>}]{<<[[[<{<>[]}[{}[]
[[<{[[<<{<{<{([][])[{}[]]}[[[]<>]{<><>}]>[[[<>][<>{}]]{([]()>[<>[]]}]}<(<<()[]><{}<>>>{<{}{}>({}<
<(((<<{{({{(((()())[{}()])<(()())[()<>]>)}<[<{<>[]}({}{})><{[]{}}<[]<>>>](<({}())<<>[]>>{[<>]})>})}
(<<[({[{{<[<<<{}()><[]{}>>([<><>][[][]])>{{(()[])(()<>)}<[()<>][<>]>}]<[{([][])<{}{}>}[{[]<>}]][<{{}()}<[
[([([({{{[<[([(){}]<[]()>)<{()()}[()<>]>][[[(){}]<()[]>][{[]()}{{}<>}])>{([{{}{}}(<>())][{{}
({<<<(<[<([([{<>[])[(){}]])([[<>()]{[]<>}](<[][]>))]([{[{}()]}]<[[{}()]<{}()>][<{}<>><(){}>]>))><({[[{(){}
{{<(<<(<[[{[{[<>()][<>{}]}{({}[]){[]{}}}]}<<<({}{})([][])>({()()](<><>))>{<([]())((){})>{{[][]}{{}()}}}>]][{
[{(<(((<<{{<[{{}{}}<()()>]>((([][])<{}[]>)<[<>{}]{<>()}>)}}<[(<({}{})<[]()>>[(<><>){[]<>}]){({<>{}}<()()>)
<[<<[([[<{[<<[()[]][{}{}]><(<><>){(){}}>>({<[]()>{()()}}<(()[]){()()}>}]{([<[][]>](([]<>)[{}<>]))
(<([[[<((<(({<{}<>>[{}()]}{<<><>>}))})([[[[{{}()}<()>]<<()<>>{<>[]}>]]((({{}[]}([]{}))({{}()
[(([{({<([{[<{<>()}[[][]]>[{<>}<{}{}>]]({({}[]){<>[]}})}([{(()<>)<<>{}>}[[[]{}]{()[]}]][([[]<>][<><>])[<[]{
[<<({{{([<<({{<><>}[{}{}]})[<[()]({}{})>(<{}()>[[]{}])]>{(([{}{}][<><>])[[{}<>]{[]{}}>)}>][<[([{()()}<{}<>>]<
<[{({<([([(<{[[][]](<>())}([{}()]([]{}))>((<()()>[()<>])<([]{}){()[]}>))[<(({}{})(()<>))(([]()][{}<>])><
{{{[{<({<<{[(([]())<[][]>][{{}[]}{[]()}]]{[{()<>}<()[]>]([<>()][<>()])}}>>}({[(((<{}[]>[<><>])<{[]{}
<<(<<<(<[{{{{{<>[]>[[]<>]}{[<>[]](<>{})}}}}][(<<({[]<>}<()()>)<{{}()}[{}{}]>><[<<>{}><<>()>]([<
[{<(((<{{[{[[[{}<>][[][]]][{[]{}}{[]()}]](([(){}]([]<>))[<()()>[[]{}]])}]}<(([{(<>[])[{}<>]}([<>]{[]<>
<(<{[([(<[([<{(){}}>([<>[]]([]{}))]){{({{}[]}{()[]})<<{}{}>{[]{}}>}{{{[][]}{{}[]}}{<[]{}>{(){}}}}
<<[{(<([{<<<({(){}})([()]<[][]>)>>>}])>[(<[<[<{(<><>)([]<>)}{([]{})<{}{}>}>][[(({}{})(<>{})){{{}{}}({}<>)}]<[
[[([[[{[{([[{<[]<>>(()<>)}<{<><>}({}<>)>][[<()()>[()<>]](([]{})({}[]))]])([((<(){}>(()[])){{<>}[<>()]})]<
[[(<(((({<<(<<[]<>>><((){})<<>{}>>)<[{<><>}([][])]<([]<>)<()<>>>>>>[{[({(){}}{<>{}})]<[({}<
<[{(({<{(<[[({()<>})([[]{}]{()()})]<(<<>{}>[<>[]>){{{}{}}(<>{})}>]<{[<[][]>]}[[(()[])<[][]>]{[(
<[{<<(<[[(((([[]{}][<>()]](({})<<>[]>)))[<{[<>{}](()())}[<<><>>[<>()]]><[<<>[]>{<><>}]((()<>){()<>})>])[{{({[
<{[[<[[[{({<([<>{}]{<>{}})[[{}<>]{{}{}}]>([{[]<>}<[]<>>]{{{}()}})})<<<[[[][]]<[]()>]({{}{}}[<>()]))>>}{
[{{{{{[{(<{<{{[]{}}((){})}([[]()]({}()))>}{{<[<><>]<[][]>><<{}[]><{}{}>>}<([<>{}]{<>()}){(<>{})}>}>)[
([{{[({[{{<{{([]<>)[{}[]]}[[{}{}]{[]()})}>[[<{[]{}}([]{})><(<>{})[{}<>]>]({(<>)[{}[]]}(<[]()>([]<>)))]}
<[{{[{{{[[[<<<{}<>><{}<>>>{{(){}}({}<>)}>{[[()()]<{}()>]}]((<(<>)(()<>)>{[{}()]<{}[]>})(({[]
<({{[[[{(([<[<[][]>{[]{}}](<{}{}>{{}[]})>])((({<<>[]>}[([][])<()<>>]})[<{[[]]{{}()}}{{(){}}{[]()}}><{(<>{}){[
<(((<(<<<{<[[<{}<>>[<>{}]]([[]<>]<{}()>)]>({({()<>}({}{}]){{(){}}<<>[]>}}[{[()<>]}<(()<>)(
({{<{[<<([({<{()<>}>(<{}[]>[()<>])}<[([][])[()]]>)(<([()()][{}{}])[([]())[{}[]]]>{[(<>{})]})]{<([<[]<>
({[(((({<{({[([]<>)(()<>)]([{}{}](()[]))}[<{()[]}[{}()]>{({}[]){()<>}}]){[[<<><>>[<>[]]](((
<<{<{[{<{[{<[[{}{}]{<>{}}]([(){}]{<>()})><[<[][]>(<>[])]>}<[{<{}<>>(()[]]}([[][]]([]{}))][{{{}()}
[<{<{([<([<(({[]<>}(()<>)){{()[]}<[]()>})[{{(){}}{[]<>}}<{[][]}{<>{}}>]>{<{{[]()}}>[{<{}()>[[]()]}(<[]()>[(
({(<{{{[[({[[{<><>}{{}<>}]{{<>()}[{}{}]}]{{({}<>)([]<>)}[[(){}]]}}[<{({}<>)({}{})}{[[]]<<>{}>}><{([]{}
{<[<{<[((<<({<<><>>[()<>]}({{}()}<{}<>>))[{{<>}<<>[]>}[<[][]>({}[])]]>>){<(<<{()}[[]{}]>{[[]]{{}{}}}>
[<{{([(<[{{<{<[][]>{(){}}}{<()<>>[()[]]}>}{<{[[][]][{}<>]}([()[]]<(){}>)>(({()))(<[]>(()())))}}]>(
{<{<<(<[[[[([(<><>)]{[[]{}](<>{})})]({({[]<>}<{}[]>)}{[<<>()>{[]()}][{<>{}}[<>[]]]})><[[(<
<([<[{(<({(([{[][]}[<>{}]](({}())<<>{}>))([([]{})]<<<><>>(<>{})>)){{<<{}[]>{<>[]}><[[]()]<
((([<<{[([[{{({}<>)(<><>)}{{[]<>}<<>>}}(({()()}{{}<>}))][{{{(){}}[()<>]}<[()[]][[]<>]>}]][{<
{{{[<[{({<{([(()[])[()[]]]<[<><>]({}())>)}<{(<<>[]>{()}){<()()>(()[])}}[[[[]{}]({}{})]]>>}<[[<{<(){}>
([<(<(<[{[{{<{{}<>}{[][]}>([()[]]([]))}{({[]{}}[()()])}}<<(({}[])[[]{}])[(<><>)]>>][<<([<>(
(<(<[{[<(([{{<{}>[()[]]}[({}<>){()<>}]}<<{{}[]}{()()}>{(<>{}){()<>}}>]({[(<><>)[{}<>]]<<{}<>><()(
[({{[{({<([<{([]{})({}{})}{[<>()][<><>]}>[{<<>>(()[])}]]){(({[{}[]]<{}[]>}({<>{}}[()()]))[<<[]<>><[]{}>>])}
<(([(({[{{{({(<>[])<[]()>}{(()<>)<()()>})}{[<(()<>)[<><>]>(<()()>)]<({{}()}<(){}>)[([]<>)<()[]>]>}}{{{{<{}
{[<({<<<(({<{([][])<{}<>>}[[[]()][{}[]]]>{[[{}{}](<><>)][([][])[<>()]]}})(([(((){})<<>()>)<{[]<>}<{}>>]<[([]{
<[[[<[[[<[[({{[]<>}{[]()}}{{{}()}})]{{(<{}[]>[()()])(<[]()}((){}))}}](<{[<()()><{}{}>](<()>{{}()})}
{[{<{[<{{(<(({{}[]}{[]<>}){[<><>]{{}{}}})>([{{<>{}}<(){}>}]<([[]<>]([]()])(<[]{}>)>))}<({(
{{<(<(<<<[{<[({}())[{}]](<()<>>{<>[]})><<<<>()>[()[]]]{{[]<>}{{}[]}}>}{[([<>[]]{[]{}})](<{<>()}(
({(({{<((({[([(){}][()<>])]((<[]>({}{}))[([][])({}{})])})))>{<<([{[(<>())<{}<>>]}[{{()<>}[{}()]}{<[]{}>[()]}]
(<<[[(<({((([[[]{}](())]{(<><>)(<>())}))[[{[[]()]<[]<>>}<(()[])<<>[]>>](({{}[]}[{}{}]){{<>{}}{<>
<[[<(<[({[{<{<{}<>>({}{})}(<()()>{()[]})][(([][]){{}{}})<{[]{}}({}())>]}(<<([]<>){<><>}><[(
((([{[{[{{({<[{}{}]<()<>>>{{<>()}(<>{})}}(<{[]{}}[{}[]]>[{()[]}{{}[]}]))}{([[<[]><(){}>]{{{}()}[()[]
<([<<{[{<<<{<[[]()]<{}[]>>{[{}<>]([][])}}(({{}}<(){}>)[[()<>][[]<>]])>><[({{[]}[{}<>]}[[[]<>]<<>{}>])
{<{{<<<(<[([{(()())<{}<>>}(<{}<>>([]())}](<{[]<>}(<>{})>))([[<(){}>[[]()]]]{[[()[]]({}())][<{}
<([{<({({{<<<<(){}>{<><>}>{<<><>>([]())}>((<<>()><{}()>)[({}{})[(){}]]}>{([((){}){[][]}])[<
{[(<(({[({<({<(){}>([][])}((<>)[()])){<[<>()]<<><>>>}>[<{<<>[]>}<{{}()}[(){}]>>[[<[]<>>{{}[]}>]]}<[<<<{}
{{<({<([<<(([{()}{{}<>}][{<><>}{[]{}}]))<(<<()<>><[]{}>]{(()[]){()[]}})[[(<>){{}()}]{((){})}]>>
<[<[<[[({<(({{[][]}[()()]}{(<>{}]{<>[]}})<<(()())(()<>)>>)>(({[(<>{})[{}[]]]{([][])[()[]]}}{<";
